{
  "source": "doc/api/jxcore-command-mt.markdown",
  "modules": [
    {
      "textRaw": "Multithreading from the Command Line",
      "name": "multithreading_from_the_command_line",
      "desc": "<p>Generally, there are two ways of executing your JavaScript code in multiple threads with JXcore.\nYou can read about both of them here: <a href=\"jxcore-feature-multithreading.html#jxcore_feature_multithreading_how_to_run_multithreaded_code\">How to run multithreaded code?</a>,\nbut right now we will focus only on running multi-threaded code from the command line.\n\n</p>\n",
      "modules": [
        {
          "textRaw": "Maximum number of threads",
          "name": "maximum_number_of_threads",
          "desc": "<p>The maximum number of threads to run with <code>mt</code> or <code>mt-keep</code> command is 16.\nThis is different to maximum thread count value when set with <a href=\"jxcore-tasks.html#jxcore_tasks_tasks_setthreadcount_value\"><code>tasks.setThreadCount()</code></a> for running multithreaded <code>tasks</code>.\n\n</p>\n",
          "type": "module",
          "displayName": "Maximum number of threads"
        },
        {
          "textRaw": "Commands",
          "name": "commands",
          "properties": [
            {
              "textRaw": "mt[:number]",
              "name": "[:number]",
              "desc": "<pre><code>&gt; jx mt file.js</code></pre>\n<p>or\n\n</p>\n<pre><code>&gt; jx mt file.jx</code></pre>\n<p>Runs the code in multiple threads. Each thread executes the code independently.\n\n</p>\n<p>JXcore by default will create 2 threads in the pool for that application.\nHowever you can change this value by supplying desired <code>number</code> of threads after the colon, like:\n\n</p>\n<pre><code>&gt; jx mt:4 file.js</code></pre>\n<p>In this case, four threads will be created.\n\n</p>\n<p>Using the <code>mt</code> command works best when your code is supposed to perform some operations and exit (after the event loop becomes drained).\n\n</p>\n<p>Let&#39;s consider the following example (<em>test.js</em>):\n\n</p>\n<pre><code class=\"js\">var delay = 1000 * (process.threadId + 1 );\n\nsetTimeout(function () {\n    console.log(&quot;I&#39;m here after &quot; + (delay / 1000) +\n        &quot; secs. ThreadId: &quot;, process.threadId);\n}, delay);\n\nconsole.log(&quot;I&#39;m here immediately. ThreadID: &quot; + process.threadId);</code></pre>\n<p>Now, we&#39;ll run it with the following command:\n\n</p>\n<pre><code>&gt; jx mt test.js</code></pre>\n<p>The process will stay alive as long as all of the threads last.\nSince this sample runs on 2 threads, one of them (<code>process.threadId</code> == 0) will occupy its own event loop for 1 second,\nwhile the other one for 2 seconds (<code>process.threadId</code> == 1), and only after that time the application will exit.\n\n</p>\n"
            },
            {
              "textRaw": "mt-keep[:number]",
              "name": "[:number]",
              "desc": "<pre><code>&gt; jx mt-keep file.js</code></pre>\n<p>or\n\n</p>\n<pre><code>&gt; jx mt-keep:7 file.js</code></pre>\n<p><code>mt-keep</code> does exactly the same thing as <code>mt</code> command, except that it internally calls <a href=\"jxcore-process.html#jxcore_process_process_keepalive_timeout\"><code>process.keepAlive()</code></a> for each of the threads.\nIt means, that the whole application won&#39;t exit, unless for each of those threads you call upon <a href=\"jxcore-process.html#jxcore_process_process_release\"><code>process.release()</code></a>.\n\n</p>\n<pre><code class=\"js\">var delay = 1000 * (process.threadId + 1 );\n\nsetTimeout(function () {\n    console.log(&quot;I&#39;m here after &quot; + (delay / 1000) +\n        &quot; secs. ThreadId: &quot;, process.threadId);\n    process.release();\n}, delay);\n\nconsole.log(&quot;I&#39;m here immediately. ThreadID: &quot; + process.threadId);</code></pre>\n<p>When we&#39;ll run it with:\n\n</p>\n<pre><code>&gt; jx mt-keep:2 file.js\n\n// output:\n// I&#39;m here immediately. ThreadID: 0\n// I&#39;m here immediately. ThreadID: 1\n// I&#39;m here after 1 secs. ThreadID: 0\n// I&#39;m here after 2 secs. ThreadID: 1</code></pre>\n<p>As you can see, we have released each thread individually (at different delays), and when the last thread is released, the main application&#39;s thread exits.\n</p>\n"
            }
          ],
          "type": "module",
          "displayName": "Commands"
        }
      ],
      "type": "module",
      "displayName": "Multithreading from the Command Line"
    }
  ]
}
