{
  "source": "doc/api/jxcore-store.markdown",
  "modules": [
    {
      "textRaw": "Memory Store",
      "name": "memory_store",
      "desc": "<p>JXcore provides you with a fast and efficient in-memory storing capabilities. We call it Memory Store.\n\n</p>\n<p>It’s implementation is based on Google’s cpp-btree library, hence benefits from it’s advantages.\n\n</p>\n<p>The major performance benefit from Memory Store is very high access speed (even for large containers) and low memory foot-print.\nIndeed, the best news is, that Memory Store is kept outside V8′s heap memory space.\nAs a result it doesn&#39;t fall under it&#39;s limitations (similar to Multithreaded isolates).\nKeeping V8 away from high memory pressure also results in more responsive application since the unexpected garbage collection may keep the application blocked several seconds.\n\n</p>\n<p>The Memory Store works like a standard key/value store. It is available for both main and sub threads and also as a separate or shared object.\n\n</p>\n<p>The <code>key</code> for the element has to be unique in the scope of entire store. Basically key should be a string type, but you can also use number and it will be converted to string internally.\nThe <code>element</code> also should be a string type, but you can use a number and it will be converted to string internally.\n\n</p>\n<p>The Memory store is a global object and can be used anywhere:\n\n</p>\n<pre><code class=\"js\">var store = jxcore.store;</code></pre>\n<p>or for multi-threaded access:\n\n</p>\n<pre><code class=\"js\">var shared = jxcore.store.shared;</code></pre>\n",
      "type": "module",
      "displayName": "Memory Store"
    },
    {
      "textRaw": "API",
      "name": "api",
      "properties": [
        {
          "textRaw": "jxcore.store",
          "name": "store",
          "desc": "<p>When used in multi-threading, every subthread has it’s own <code>jxcore.store</code> object.\nIt can be considered as a static global per store context, which means, that threads cannot share the same <code>jxcore.store</code> among themselves.\nBut all of the tasks running inside a particular thread have shared access to it.\n\n</p>\n",
          "methods": [
            {
              "textRaw": "store.exists(key, element)",
              "type": "method",
              "name": "exists",
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`key` {String} ",
                      "name": "key",
                      "type": "String"
                    },
                    {
                      "textRaw": "`element` {String} ",
                      "name": "element",
                      "type": "String"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "key"
                    },
                    {
                      "name": "element"
                    }
                  ]
                }
              ],
              "desc": "<p>Sets the element&#39;s value for specific key in the store.\nIf the key already exists, the current element&#39;s value will overwrite the previous one.\n\n</p>\n<pre><code class=\"js\">var store = jxcore.store;\nif (!store.exists(&quot;111&quot;)) {\n    store.set(&quot;111&quot;, &quot;test&quot;);\n}</code></pre>\n"
            },
            {
              "textRaw": "store.get(key)",
              "type": "method",
              "name": "get",
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`key` {String} ",
                      "name": "key",
                      "type": "String"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "key"
                    }
                  ]
                }
              ],
              "desc": "<p>Removes the key/value pair from the store and returns the element’s value as a string.\nIf the key is found, the method returns its value, otherwise returns <code>undefined</code>.\n\n</p>\n<pre><code class=\"js\">jxcore.store.set(&quot;key1&quot;, &quot;value1&quot;);\n\n// below line outputs: &quot;value for key1: value1&quot;\nconsole.log(&quot;value for key1:&quot;, jxcore.store.get(&quot;key1&quot;));\n\n// another call of get() outputs: &quot;value for key1: undefined&quot;\n// because the key/value pair was removed at first call\nconsole.log(&quot;value for key1:&quot;, jxcore.store.get(&quot;key1&quot;));</code></pre>\n"
            },
            {
              "textRaw": "store.read(key)",
              "type": "method",
              "name": "read",
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`key` {String} ",
                      "name": "key",
                      "type": "String"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "key"
                    }
                  ]
                }
              ],
              "desc": "<p>Reads element for specific key and returns its value as a string. This method doesn&#39;t remove the element from the store.\nIf the key is found, the method returns its value, otherwise returns <code>undefined</code>.\n\n</p>\n<pre><code class=\"js\">var store = jxcore.store;\nstore.set(&quot;111&quot;, &quot;test&quot;);\n\n// the calls below are equivalent:\nvar x = store.read(&quot;111&quot;);\nvar y = store.read(111);\n\n// now x is equal to y</code></pre>\n"
            },
            {
              "textRaw": "store.remove(key)",
              "type": "method",
              "name": "remove",
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`key` {String} ",
                      "name": "key",
                      "type": "String"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "key"
                    }
                  ]
                }
              ],
              "desc": "<p>Removes the key/value pair from the store.\n\n</p>\n<pre><code class=\"js\">var store = jxcore.store;\nstore.set(&quot;111&quot;, &quot;test&quot;);\nstore.remove(111);</code></pre>\n"
            },
            {
              "textRaw": "store.set(key, element)",
              "type": "method",
              "name": "set",
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`key` {String} ",
                      "name": "key",
                      "type": "String"
                    },
                    {
                      "textRaw": "`element` {String} ",
                      "name": "element",
                      "type": "String"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "key"
                    },
                    {
                      "name": "element"
                    }
                  ]
                }
              ],
              "desc": "<p>Sets the element’s value for specific key in the store.\nIf the key already exists, the current element’s value will overwrite the previous one.\n\n</p>\n<pre><code class=\"js\">var store = jxcore.store;\nstore.set(&quot;string&quot;, &quot;test&quot;);\n\n// below usages will make automatic conversion of provided keys and values\n// into strings:\nstore.set(1, &quot;one&quot;);       // equivalent to store.set(&quot;1&quot;, &quot;one&quot;);\nstore.set(2, &quot;two&quot;);       // equivalent to store.set(&quot;2&quot;, &quot;two&quot;);\nstore.set(true, true);     // equivalent to store.set(&quot;true&quot;, &quot;true&quot;);\nstore.set(1.45, 2.77);     // equivalent to store.set(&quot;1.45&quot;, &quot;2.77&quot;);</code></pre>\n"
            }
          ]
        }
      ],
      "modules": [
        {
          "textRaw": "jxcore.store.shared",
          "name": "jxcore.store.shared",
          "desc": "<p>In some scenarios you may need a single store, which you could access from any thread. Use <code>jxcore.store.shared</code> object for this purpose.\nYou should be aware of the following principles, even if all operations on this store are thread-safe.\nFirst of all, access time may take little longer comparing to the single threaded <code>jxcore.store</code> especially when using operations,\nwhich modify content of the data store (<code>set()</code>, <code>remove()</code> and <code>get()</code> – the last one also removes the item).\nAlso, when different threads are simultaneously writing/modifying value of the same key, the final stored value is the one that is updated last.\n\n</p>\n<p>Thread-safe <code>jxcore.store.shared</code> has exactly the same methods as single threaded <code>jxcore.store</code>, but also implements some other members, specific for multi-threading.\n\n</p>\n",
          "modules": [
            {
              "textRaw": "store.shared.exists(key, element)",
              "name": "store.shared.exists(key,_element)",
              "desc": "<p>See <code>store.exists(key, element)</code>.\n\n</p>\n",
              "type": "module",
              "displayName": "store.shared.exists(key, element)"
            },
            {
              "textRaw": "store.shared.expires(key, timeout)",
              "name": "store.shared.expires(key,_timeout)",
              "desc": "<p>Sets an expiration <code>timeout</code> (milliseconds) for specified <code>key</code>.\nIf there is no <code>read()</code>, <code>get()</code> or <code>set()</code> method called on this <code>key </code>within the <code>timeout</code> period (after <code>expires()</code> has been called),\nthe <code>key</code> and it&#39;s value are automatically removed from the shared.store.\nOtherwise, whenever one of those methods are invoked for this <code>key</code> before the <code>timeout</code> elapses,\nJXcore invokes again the <code>expires()</code> method with the same parameters, so at that moment the <code>timeout</code> counter starts from zero.\n\n</p>\n<p>Precision of <code>key</code> expiration is +/- 10 milliseconds, which means, that if you set the <code>timeout</code> to e.g. 510 ms,\nthe expiration may occur in a range between 500 and 520 ms.\n\n</p>\n<pre><code class=\"js\">var mem = jxcore.store.shared;\n\nmem.set(&quot;key&quot;, &quot;Hello&quot;);\nmem.expires(&quot;key&quot;, 350);\n\nsetTimeout(function(){\n    // the key still exists in the shared store\n    // mem.read(&quot;key&quot;) will will rewind the timeout counter to the start\n    // so it will expire after another 350 ms\n    console.log(&quot;data&quot;, mem.read(&quot;key&quot;));\n},300);\n\nsetTimeout(function(){\n    // right now the timeout is expired\n    // and the key is already removed from the store.\n    // the return value of mem.read(&quot;key&quot;) will be undefined\n    console.log(&quot;data&quot;, mem.read(&quot;key&quot;));\n},900);</code></pre>\n",
              "type": "module",
              "displayName": "store.shared.expires(key, timeout)"
            },
            {
              "textRaw": "store.shared.get(key)",
              "name": "store.shared.get(key)",
              "desc": "<p>See <code>store.get(key)</code>.\n\n</p>\n",
              "type": "module",
              "displayName": "store.shared.get(key)"
            },
            {
              "textRaw": "store.shared.getBlockTimeout()",
              "name": "store.shared.getblocktimeout()",
              "desc": "<p>Gets the maximum time (milliseconds) during which the key in a <code>safeBlock()</code> is locked.\nBy default its value is 10000 milliseconds and can be changed with <code>setBlockTimeout()</code>.\n\n</p>\n",
              "type": "module",
              "displayName": "store.shared.getBlockTimeout()"
            },
            {
              "textRaw": "store.shared.read(key)",
              "name": "store.shared.read(key)",
              "desc": "<p>See <code>store.read(key)</code>.\n\n</p>\n",
              "type": "module",
              "displayName": "store.shared.read(key)"
            },
            {
              "textRaw": "store.shared.remove(key)",
              "name": "store.shared.remove(key)",
              "desc": "<p>See <code>store.remove(key)</code>.\n\n</p>\n",
              "type": "module",
              "displayName": "store.shared.remove(key)"
            },
            {
              "textRaw": "store.shared.set(key, element)",
              "name": "store.shared.set(key,_element)",
              "desc": "<p>See <code>store.set(key, element)</code>.\n\n</p>\n",
              "type": "module",
              "displayName": "store.shared.set(key, element)"
            },
            {
              "textRaw": "store.shared.safeBlock(key, safeBlockFunction, errorCallback)",
              "name": "store.shared.safeblock(key,_safeblockfunction,_errorcallback)",
              "desc": "<p>Allows to execute number of store related operations on a single <code>key</code> in one continuous safe block.\nDuring it&#39;s execution, access to this element (the key and it&#39;s value) is locked for other threads.\nThe default maximum blocking time is defined by <code>setBlockTimeout()</code> parameter.\n\n</p>\n<p>The <code>safeBlockFunction</code> is the execution block. This should be a function without any arguments.\n\n</p>\n<pre><code class=\"js\">jxcore.store.shared.safeBlock(&quot;myNumber&quot;, function () {\n\n        if (!shared.exists(&quot;myNumber&quot;)) {\n            shared.set(&quot;myNumber&quot;, 0);\n        }\n\n        var n = shared.read(&quot;myNumber&quot;);\n        n = parseInt(n) + 1;\n        shared.set(&quot;myNumber&quot;, n);\n\n        // working with a different key should not be performed in this block:\n        shared.set(&quot;myNumber_2&quot;, 333);\n});</code></pre>\n<p>In the example above we are using a <code>safeBlock</code> to perform multithread-safe increment of <em>myNumber</em> value kept in the shared store.\n\n</p>\n<p>Functionality of the <code>safeBlockFunction</code> should be limited only to operations on a single key kept in the store, because locking mechanism applies only for that <code>key</code> and there is simply no safety guarantee for any other keys.\n\n</p>\n<p>Every <code>safeBlock()</code> invocation locks the key and it&#39;s value for a specific amount of time defined by <code>setBlockTimeout()</code>.\n\n</p>\n<p>The <code>errorCallback</code> will be invoked whenever an exception occurs inside the <code>safeBlockFunction</code>. Exception is caught in a safe manner, so the key and its value will be unlocked for other threads access.\n\n</p>\n<pre><code class=\"js\">jxcore.store.shared.safeBlock(&quot;myNumber&quot;,\n    function () {\n        throw &quot;some error&quot;;\n    },\n    function(err) {\n        console.log(err);\n    }\n);</code></pre>\n",
              "type": "module",
              "displayName": "store.shared.safeBlock(key, safeBlockFunction, errorCallback)"
            },
            {
              "textRaw": "store.shared.setBlockTimeout()",
              "name": "store.shared.setblocktimeout()",
              "desc": "<p>Sets the maximum time (milliseconds) during which the key in a <code>safeBlock</code> is locked.\nBy default its value is 10000 milliseconds.\nWhen it elapses, JXcore automatically unlocks the key for other threads access.\n\n</p>\n",
              "type": "module",
              "displayName": "store.shared.setBlockTimeout()"
            },
            {
              "textRaw": "store.shared.setIfEqualsTo(key, newValue, checkValue)",
              "name": "store.shared.setifequalsto(key,_newvalue,_checkvalue)",
              "desc": "<p>Sets the element&#39;s value for specific key in the store, but only if its current value equals to <code>check_value</code>.\n\n</p>\n<p>Returns <code>true</code> if <code>newValue</code> was set (current value was not equal to <code>checkValue</code>). Otherwise returns <code>false</code>.\n\n</p>\n",
              "type": "module",
              "displayName": "store.shared.setIfEqualsTo(key, newValue, checkValue)"
            },
            {
              "textRaw": "store.shared.setIfEqualsToOrNull(key, newValue, checkValue)",
              "name": "store.shared.setifequalstoornull(key,_newvalue,_checkvalue)",
              "desc": "<p>Sets the element&#39;s value for specific key in the store, but only if its current value equals to <code>check_value</code> or if the key does not exist in the store.\n\n</p>\n<p>Returns <code>true</code> if <code>newValue</code> was set (current value was not equal to <code>checkValue</code> or the <code>key</code> did not exists). Otherwise returns <code>false</code>.\n\n</p>\n",
              "type": "module",
              "displayName": "store.shared.setIfEqualsToOrNull(key, newValue, checkValue)"
            },
            {
              "textRaw": "store.shared.setIfNotExists(key, element)",
              "name": "store.shared.setifnotexists(key,_element)",
              "desc": "<p>Sets the element&#39;s value for specific key in the store, but only if the key does not exist yet.\n\n</p>\n<p>Returns <code>true</code> if <code>newValue</code> was set (the <code>key</code> did not exists). Otherwise returns <code>false</code>.\n</p>\n",
              "type": "module",
              "displayName": "store.shared.setIfNotExists(key, element)"
            }
          ],
          "type": "module",
          "displayName": "jxcore.store.shared"
        }
      ],
      "type": "module",
      "displayName": "API"
    }
  ]
}
